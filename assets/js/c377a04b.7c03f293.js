"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[971],{5318:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7378);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8185:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(5773),a=(r(7378),r(5318));const i={},o="IntelliExtract",l={unversionedId:"index",id:"index",title:"IntelliExtract",description:"IntelliExtract is a prototype that helps you extract structured data from text using LLMs using a variety of methods.",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/intelliextract/docs/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar"},s={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Example (Searching Recipes)",id:"example-searching-recipes",level:2},{value:"Additional Resources",id:"additional-resources",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"intelliextract"},"IntelliExtract"),(0,a.kt)("p",null,"IntelliExtract is a prototype that helps you extract structured data from text using LLMs using a variety of methods."),(0,a.kt)("p",null,"This project is in the very early stages and may change or break with no notice. If you end up using this in production, please let me know you're experiences."),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add intelliextract\n")),(0,a.kt)("h2",{id:"example-searching-recipes"},"Example (Searching Recipes)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import {IntelliExtract} from "intelliextract/dist/intelliextract.js"\nimport {SearchExtractor} from "intelliextract/dist/extractors/extractor.js"\nimport {SimpleJsonParser} from "intelliextract/dist/parsers/simpleJsonParser.js"\nimport { OpenAI } from "langchain/llms/openai";\n\nlet searchData = [\n  \'nuts\'\n]\n\nlet query = `Ingredients\n15g unsalted butter\n2 tbsp caster sugar\n50g whole pecans\n3 ripe nectarines, stoned and cut into eighths lengthways\n4 tbsp extra virgin olive oil, plus extra for brushing\n2 tbsp balsamic vinegar\n1 tsp honey\n2 x 100g balls of burrata or vegetarian alternative\n70g rocket\nbunch of basil leaves, roughly torn\npinch of chilli flakes`;\n\nlet extractor = new SearchExtractor(searchData);\nlet parser = new SimpleJsonParser();\nlet llm = new OpenAI({\n  modelName: "gpt-3.5-turbo",\n  temperature: 0.7,\n  maxTokens: 1000,\n  maxRetries: 5,\n});\nlet intelliextract = new IntelliExtract(llm, extractor, parser);\nlet parsedOutput = await intelliextract.run(query)\n\nconsole.log(parsedOutput);\n')),(0,a.kt)("h2",{id:"additional-resources"},"Additional Resources"),(0,a.kt)("p",null,"More resources that might be helpful"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://eyurtsev.github.io/kor/"},"Kor"),': Kor is a "half-baked prototype" that helps with a similar problem (in python)')))}d.isMDXComponent=!0}}]);